type Module {
  getKey(
    key: String!
    foo: CustomMap!
  ): Int!

  returnMap(
    map: Map! @annotate(type: "Map<String!, Int!>!")
  ): Map! @annotate(type: "Map<String!, Int!>!")

  returnCustomMap(
    foo: CustomMap!
  ): CustomMap!

  returnNestedMap(
    foo: Map! @annotate(type: "Map<String!, Map<String!, Int!>!>!")
  ): Map! @annotate(type: "Map<String!, Map<String!, Int!>!>!")

  returnMapOfEnum(
    map: Map! @annotate(type: "Map<String!, MyEnum!>!")
  ): Map! @annotate(type: "Map<String!, MyEnum!>!")
}

type CustomMap {
  map: Map! @annotate(type: "Map<String!, Int!>!")
  nestedMap: Map! @annotate(type: "Map<String!, Map<String!, Int!>!>!")
}

enum MyEnum {
  ONE
  TWO
}