/// NOTE: This is an auto-generated file.
///       All modifications will be overwritten.

from abc import ABC, abstractmethod
from typing import TypeVar, Generic

import .types import *

from polywrap_core import InvokerClient, MaybeAsync, UriPackageOrWrapper
from polywrap_plugin import PluginModule

TConfig = TypeVar("TConfig")


{{#moduleType}}
{{#methods}}

class Args{{#toUpper}}{{name}}{{/toUpper}}(TypedDict):
    {{#arguments}}
    {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: {{#toPython}}{{toGraphQLType}}{{/toPython}};
    {{/arguments}}
{{/methods}}
{{/moduleType}}

class Module(Generic[TConfig], PluginModule[TConfig]) {
    {{#moduleType}}
    {{#methods}}
    @abstractmethod
    def {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}(
        args: Args{{#toUpper}}{{name}}{{/toUpper}},
        client: InvokerClient[UriPackageOrWrapper],
        {{^env}}env: None{{/env}}{{#env}}env: {{^required}}Optional[{{/required}}Env{{^required}}] = None{{/required}}{{/env}}
    ) -> {{#return}}{{#toPython}}{{toGraphQLType}}{{/toPython}}{{/return}}:
        pass
    {{^last}}

    {{/last}}
    {{/methods}}
    {{/moduleType}}
}
