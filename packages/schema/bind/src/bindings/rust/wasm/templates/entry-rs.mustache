{{#moduleType}}
{{#methods.length}}
use crate::{
    {{#methods}}
    {{#toLower}}{{name}}{{/toLower}}_wrapped{{^last}},{{/last}}
    {{/methods}}
};
{{/methods.length}}
{{/moduleType}}
use polywrap_wasm_rs::{
    abort,
    invoke,
    InvokeArgs,
};
use crate::module::{IModule, Module};

#[no_mangle]
pub extern "C" fn _wrap_invoke(method_size: u32, args_size: u32, env_size: u32) -> bool {
    // Ensure the abort handler is properly setup
    abort::wrap_abort_setup();

    let mut module = Module::new();
    let args: InvokeArgs = invoke::wrap_invoke_args(method_size, args_size);

    match args.method.as_str() {
        {{#moduleType}}
        {{#methods}}
        "{{name}}" => {
            let result = {{#toLower}}{{name}}{{/toLower}}_wrapped(&mut module, args.args.as_slice(), env_size);
            invoke::wrap_invoke_result(result);
            true
        }
        {{/methods}}
        {{/moduleType}}
        _ => {
            invoke::wrap_invoke_error(format!("Could not find invoke function {}", args.method));
            false
        }
    }
}
