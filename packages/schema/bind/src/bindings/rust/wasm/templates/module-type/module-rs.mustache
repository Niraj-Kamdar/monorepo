{{#moduleType}}
use crate::{
    {{#methods}}
    Args{{#toUpper}}{{name}}{{/toUpper}},
    {{/methods}}
};
use polywrap_wasm_rs::{
    BigInt,
    BigNumber,
    Map,
    JSON,
};
{{#propertyDeps.length}}

{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{#detectKeyword}}{{#toUpper}}{{type}}{{/toUpper}}{{/detectKeyword}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{#detectKeyword}}{{#toUpper}}{{type}}{{/toUpper}}{{/detectKeyword}},
};
{{/isEnum}}
{{/propertyDeps}}
{{/propertyDeps.length}}

pub struct Module {
  {{#hasEnv}}pub env: Option<Env>,{{/hasEnv}}
}
{{#hasEnv}}

pub trait EnvTrait {
  fn __set_env__(&mut self, env: Env) -> ();
}
{{/hasEnv}}

pub trait IModule {
  {{#methods}}
  fn {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}(&self, args: Args{{#toUpper}}{{name}}{{/toUpper}}) -> Result<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, String>;
  {{^last}}

  {{/last}}
  {{/methods}}
}

impl Module {
  pub fn __new__() -> Module {
    Module {
      {{#hasEnv}}env: None,{{/hasEnv}}
    }
  }
}

{{#hasEnv}}
impl EnvTrait for Module {
  fn __set_env__(&mut self, env: Env) -> () {
    self.env = Some(env);
  }
}
{{/hasEnv}}
{{/moduleType}}