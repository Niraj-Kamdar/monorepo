import * as Types from "..";

{{> serialization_imports}}

import {
{{#methods}}
  deserialize{{name}}Args,
  serialize{{name}}Result{{^last}},{{/last}}
{{/methods}}
} from "./serialization";

import {
  wrap_invoke_args,
  wrap_invoke_result,
  wrap_invoke_error,
  wrap_load_env,
  InvokeArgs,
} from "@polywrap/wasm-as";

export abstract class IModule {
  {{#hasEnv}}private _env: Types.Env | null = null;{{/hasEnv}}
  {{#methods}}
  abstract {{#detectKeyword}}{{name}}{{/detectKeyword}}(
    args: Types.Args_{{#detectKeyword}}{{name}}{{/detectKeyword}}
  ): {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}};

  {{/methods}}
  {{#hasEnv}}
  public get env(): Types.Env {
    if (this._env === null) {
      throw new Error("Environment is not set, and it is required by this module");
    }
    return this._env as Types.Env;
  }

  public setEnv(env: Types.Env): void {
    this._env = env;
  }
  {{/hasEnv}}
}