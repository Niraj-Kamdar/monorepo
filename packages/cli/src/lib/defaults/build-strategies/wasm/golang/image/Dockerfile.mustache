FROM polywrap/vm-base-go:0.1.5

WORKDIR /project

COPY . .

# Ensure all go mod deps are correct
RUN go mod tidy

# Reset our build-staging directory
RUN rm -rf ./build-staging
RUN mkdir ./build-staging

# Build the module with tinygo
RUN tinygo build -o ./build-staging/module.wasm -target wasm-target ./module/wrap/main/main.go

# Extract the names of all "extra" exports from the wasm module
RUN EXTRA_EXPORTS=$(
  # 1. convert to wasm text
  wasm2wat ./build-staging/module.wasm |
  # 2. extract all exports
  grep -oP '(?<=export ")[^"]+' |
  # 3. keep all necessary exports (wrap & asyncify)
  grep -vE '_wrap_invoke|asyncify_start_unwind|asyncify_stop_unwind|asyncify_start_rewind|asyncify_stop_rewind|asyncify_get_state' |
  # 4. convert remaining string into single-line seperated by spaces
  tr '\n' ' '
)

# Remove these extra exports from the wasm module via wasm-snip
RUN wasm-snip ./build-staging/module.wasm -o ./build-staging/module_exports.wasm $EXTRA_EXPORTS

# Extract the unsupported wasi imports, and forcefully remove them.
# This ideally would not be necessary, but it is for go-based wraps.
RUN EXTRA_IMPORTS=$(
  # 1. convert to wasm text
  wasm2wat ./build-staging/module_exports.wasm |
  # 2. extract all wasi imports
  grep -oP '(?<=wasi_snapshot_preview1" ")[^"]+' |
  # 3. convert string into single-line seperated by spaces
  tr '\n' ' '
)

# Remove these extra imports from the wasm module via wasm-snip
RUN wasm-snip ./build-staging/module_exports.wasm -o ./build-staging/module_exports_imports.wasm -p $EXTRA_IMPORTS

# Optimize the module now that exports & imports are removed
RUN wasm-opt ./build-staging/module_exports_imports.wasm -Oz --converge -o ./build-staging/module_exports_imports_opt.wasm

# Make the build directory
RUN rm -rf ./build
RUN mkdir ./build

# Copy the result to the build folder
RUN cp ./build-staging/module_exports_imports_opt.wasm ./build/wrap.wasm
