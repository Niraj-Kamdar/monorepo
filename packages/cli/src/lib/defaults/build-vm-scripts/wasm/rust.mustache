{{#polywrap_module}}
toml set ./{{dir}}/Cargo.toml lib.crate-type ["cdylib"] > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml && \
    true

sed -i 's/"\[cdylib\]"/\["cdylib"\]/g' ./{{dir}}/Cargo.toml

toml set ./{{dir}}/Cargo.toml package.name "module" > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml && \
    true

export RUSTFLAGS="-C link-arg=-z -C link-arg=stack-size=65536 -C link-arg=--import-memory"

cargo build --manifest-path ./{{dir}}/Cargo.toml \
    --target wasm32-unknown-unknown --release

rm -rf ./build
mkdir ./build

export WASM_INTERFACE_TYPES=1

wasm-bindgen ./{{dir}}/target/wasm32-unknown-unknown/release/module.wasm --out-dir ./build --out-name bg_module.wasm

wasm-snip ./build/bg_module.wasm -o ./build/snipped_module.wasm && \
    rm -rf ./build/bg_module.wasm

# Use wasm-opt to perform the "asyncify" post-processing step over all modules
wasm-opt --asyncify -Os ./build/snipped_module.wasm -o ./build/wrap.wasm && \
    rm -rf ./build/snipped_module.wasm
{{/polywrap_module}}